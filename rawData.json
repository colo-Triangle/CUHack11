import tkinter as tk
import json

def process_field(entry_value):
    """
    Process a comma-separated field:
      - If the user enters 'none' (case-insensitive) or leaves the field empty, return None.
      - Otherwise, split by commas, strip whitespace, and return the list.
    """
    value = entry_value.strip()
    if value.lower() == "none" or value == "":
        return None
    else:
        items = [item.strip() for item in value.split(",") if item.strip() and item.strip().lower() != "none"]
        return items if items else None

def show_confirmation(responses):
    confirmation_window = tk.Toplevel(root)
    confirmation_window.title("Confirm Your Information")
    
    # Header label
    header_label = tk.Label(confirmation_window, text="Please Confirm Your Information", font=("Arial", 14, "bold"))
    header_label.grid(row=0, column=0, columnspan=2, pady=10)
    
    # Prepare the fields for display in a table-like format
    fields = [
        ("Name", responses.get("name", "")),
        ("DOB (MM/DD/YYYY)", responses.get("dob", "")),
        ("Sex", ", ".join(responses.get("sex", [])) if responses.get("sex") else "None"),
        ("Height", f'{responses.get("height", {}).get("feet", "")} feet {responses.get("height", {}).get("inches", "")} inches'),
        ("Weight (lbs)", responses.get("weight", "")),
        ("Medications", ", ".join(responses.get("medications", [])) if responses.get("medications") else "None"),
        ("Allergies", ", ".join(responses.get("allergies", [])) if responses.get("allergies") else "None"),
        ("Preexisting Conditions", ", ".join(responses.get("preexisting_conditions", [])) if responses.get("preexisting_conditions") else "None"),
    ]
    
    # Display each field in a grid (table-like)
    for i, (label_text, value_text) in enumerate(fields, start=1):
        lbl = tk.Label(confirmation_window, text=label_text + ":", anchor="e", width=20)
        lbl.grid(row=i, column=0, sticky="e", padx=5, pady=5)
        val = tk.Label(confirmation_window, text=value_text, anchor="w", width=40)
        val.grid(row=i, column=1, sticky="w", padx=5, pady=5)
    
    # Buttons for confirmation or editing
    button_frame = tk.Frame(confirmation_window)
    button_frame.grid(row=len(fields) + 1, column=0, columnspan=2, pady=10)
    
    confirm_button = tk.Button(button_frame, text="Confirm",
                               command=lambda: confirm_response(confirmation_window, responses))
    confirm_button.pack(side="left", padx=10)
    
    edit_button = tk.Button(button_frame, text="Edit",
                            command=confirmation_window.destroy)
    edit_button.pack(side="right", padx=10)

def confirm_response(confirmation_window, responses):
    # Save responses to a JSON file
    with open("responses.json", "w") as json_file:
        json.dump(responses, json_file, indent=4)
    
    # Close the confirmation window and the main form window
    confirmation_window.destroy()
    root.destroy()
    
    # Create a new window for the final confirmation message
    thanks_window = tk.Tk()
    thanks_window.title("Confirmation")
    
    thanks_label = tk.Label(thanks_window, text="Information Confirmed, Thank you.", font=("Arial", 14, "bold"))
    thanks_label.pack(padx=20, pady=20)
    
    exit_button = tk.Button(thanks_window, text="Exit", command=thanks_window.destroy)
    exit_button.pack(pady=10)
    
    thanks_window.mainloop()

def submit():
    responses = {}
    responses["name"] = name_entry.get().strip()
    responses["dob"] = dob_entry.get().strip()
    
    # Process Sex checkboxes
    sex = []
    if male_var.get():
        sex.append("Male")
    if female_var.get():
        sex.append("Female")
    responses["sex"] = sex if sex else None
    
    # Height information
    responses["height"] = {
        "feet": feet_entry.get().strip(),
        "inches": inches_entry.get().strip()
    }
    
    # Weight (in lbs)
    responses["weight"] = weight_entry.get().strip()
    
    # Process comma-separated fields
    responses["medications"] = process_field(medications_entry.get())
    responses["allergies"] = process_field(allergies_entry.get())
    responses["preexisting_conditions"] = process_field(preexisting_conditions_entry.get())
    
    show_confirmation(responses)

# Create the main window (form)
root = tk.Tk()
root.title("User Information Form")

# Row 0: Name
name_label = tk.Label(root, text="Name:")
name_label.grid(row=0, column=0, sticky="e", padx=5, pady=5)
name_entry = tk.Entry(root, width=30)
name_entry.grid(row=0, column=1, padx=5, pady=5)

# Row 1: DOB (MM/DD/YYYY)
dob_label = tk.Label(root, text="DOB (MM/DD/YYYY):")
dob_label.grid(row=1, column=0, sticky="e", padx=5, pady=5)
dob_entry = tk.Entry(root, width=30)
dob_entry.grid(row=1, column=1, padx=5, pady=5)

# Row 2: Sex checkboxes
sex_label = tk.Label(root, text="Sex:")
sex_label.grid(row=2, column=0, sticky="e", padx=5, pady=5)
sex_frame = tk.Frame(root)
sex_frame.grid(row=2, column=1, sticky="w", padx=5, pady=5)
male_var = tk.BooleanVar()
female_var = tk.BooleanVar()
male_check = tk.Checkbutton(sex_frame, text="Male", variable=male_var)
male_check.pack(side="left", padx=5)
female_check = tk.Checkbutton(sex_frame, text="Female", variable=female_var)
female_check.pack(side="left", padx=5)

# Row 3: Height (feet and inches)
height_label = tk.Label(root, text="Height:")
height_label.grid(row=3, column=0, sticky="e", padx=5, pady=5)
height_frame = tk.Frame(root)
height_frame.grid(row=3, column=1, sticky="w", padx=5, pady=5)
feet_label = tk.Label(height_frame, text="Feet:")
feet_label.pack(side="left")
feet_entry = tk.Entry(height_frame, width=5)
feet_entry.pack(side="left", padx=5)
inches_label = tk.Label(height_frame, text="Inches:")
inches_label.pack(side="left")
inches_entry = tk.Entry(height_frame, width=5)
inches_entry.pack(side="left", padx=5)

# Row 4: Weight (lbs)
weight_label = tk.Label(root, text="Weight (lbs):")
weight_label.grid(row=4, column=0, sticky="e", padx=5, pady=5)
weight_entry = tk.Entry(root, width=30)
weight_entry.grid(row=4, column=1, padx=5, pady=5)

# Row 5: Medications (comma separated, enter "none" if not applicable)
medications_label = tk.Label(root, text='Medications (comma separated, enter "none" if not applicable):')
medications_label.grid(row=5, column=0, sticky="e", padx=5, pady=5)
medications_entry = tk.Entry(root, width=30)
medications_entry.grid(row=5, column=1, padx=5, pady=5)

# Row 6: Allergies (comma separated, enter "none" if not applicable)
allergies_label = tk.Label(root, text='Allergies (comma separated, enter "none" if not applicable):')
allergies_label.grid(row=6, column=0, sticky="e", padx=5, pady=5)
allergies_entry = tk.Entry(root, width=30)
allergies_entry.grid(row=6, column=1, padx=5, pady=5)

# Row 7: Preexisting Conditions (comma separated, enter "none" if not applicable)
preexisting_conditions_label = tk.Label(root, text='Preexisting Conditions (comma separated, enter "none" if not applicable):')
preexisting_conditions_label.grid(row=7, column=0, sticky="e", padx=5, pady=5)
preexisting_conditions_entry = tk.Entry(root, width=30)
preexisting_conditions_entry.grid(row=7, column=1, padx=5, pady=5)

# Row 8: Submit button
submit_button = tk.Button(root, text="Submit", command=submit)
submit_button.grid(row=8, column=1, pady=10)

root.mainloop()
